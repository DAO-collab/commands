$ docker version

$ docker info  // show all info about docker installed

$ sudo docker container run --name webhost-1 -p 8080:80 --detach --network webService1 -v volumeName:/var/lib/<name> --mount type=bind,source=/home/ehsan/projects/data,target=/app nginx   // pull nginx image from docker hub and name it to webhost-1 and publish it to port 8080 and map incoming requests to port 80. so we can test it in browser by localhost:8080 after installation. in this command --detach means release terminal to me after creation (logs won't show in terminal). --network means set this container in webService1 network. otherwise bridge network will be set. With -v we can set the volume of container data with custom name and mount path. if volume nama is already exists, that volume will be used and no new volume will be created. --mount means mount this container with bind mount type, from source path in host to target path in the container.

note:
we can allow docker to choose a name automatically:
$ sudo docker container run -p 8081:80 nginx



$ sudo docker container ls  // show running containers

$ sudo docker container ls -l  // show latest containers

$ sudo docker container ls -a  // show all containers


Start:
$ sudo docker container start <name or id>

Stop:
$ sudo docker container stop <name or id>

Restart:
$ sudo docker container restart <name or id>

Remove:
$ sudo docker container rm <name or id>

note:
if a container is running, we can't remove it normally. we must stop it, or using -f to force it to remove:

$ sudo docker container rm -f <name or id>


Prune:
We can remove all stopped containers:

$ sudo docker container prune


Rename:
$ sudo docker container rename <name> <newName>


Show logs:
$ sudo docker container logs -f <name>

-f means show logs interactivly.


Show port:
$ sudo docker container port <name>


Processes:
we can see linux processes of any container with this:

$ sudo docker container top <name>

we can kill any process with this:

$ sudo kill -9 <processId>


Stat:
We can check os resource usage for a container and refreshes it every one second

$ sudo docker container stats <name>

note:
If we don't pass container in, it will show all containers stat.

We can use --no-stream to don't refresh and only show once time


exec:
We can connect to container bash file with this:

$ sudo docker container exec -it  mysql-db-1 /bin/bash   // in this example we connect to mysql container. -i means interactive. -t means give a virtual bash (tty) to me.


We can run a mysql query directly:

$ sudo docker container exec mysql-db-1 mysql -u root -p'123456' -e "use myDb; select * from myTable;




We can set that when container stops, it will be removed automatically:

$ sudo docker container run -exec -it -rm --name ubuntu1 ubuntu /bin/bash

============================================
================ Inspect ===================
============================================

$ sudo docker container inspect <name or id>


to see especific node in json data:

$ sudo docker container inspect -f "{{ .Config.Env }}"  <name or id>




We can pass in variable to inspect -f to show a specific key-values for all containers:

In this code we print all containers names and exposed ports:

$ sudo docker container inspect -f '{{ .Name }} --> {{ .Config.ExposedPorts }}' $(sudo docker container ls -aq)



===========================================
================ Image ====================
===========================================

$ sudo docker image ls  // show list of all images

$ sudo docker image pull mongo:4.0


$ sudo docker image inspect


Create tag:

$ sudo docker image tag <imageName> <newImageName>:tag

$ sudo docker image tag hello-world  ahmadadibzad/hello-world:1.1


push to docker hub:

$ docker login

$ sudo docker image push <imageName>:tag

$ docker logout



see all layers of an image:

$ sudo docker image history <imageName>:tag



remove image:

$ sudo docker image rm <name>:tag


save image to an output file:

$ sudo docker image save -o <newFileName> <imageName>:tag   // -o means output


load image from saved file:

$ sudo docker image load -i <savedFileName>   // -i means input


build image:

$ sudo docker build -t <name>:tag .   // build from Dokerfile in . path

if Dockerfile name is changed (for example Dockerfile.multi) we must use:

$ sudo docker build -t <name>:tag . -f Dockerfile.multi


=====================================
======= cleanup spaces ==============
=====================================

$ sudo docker image prune -a

$ sudo docker system prune

$ sudo docker system prune -a

$ sudo docker volume prune





============================================
============ Network, DNS ==================
============================================

bridge is default network in docker


To show all networks:
$ sudo docker network ls

$ sudo docker network inspect <id or name>   // show network details. only running containers will be shown in  containers node.

To create new network:

$ sudo docker network create <name>

note:
when we create new network, the driver will be set to bridge by default.


connect a network to a container:

When we create a new container, the default network is bridge (look at network node with inspect command). we can connect container to another network:

$ sudo docker network connect <networkName> <containerName>

Now, out container has two network connected: bridge and other network.

We can disconnect bridge network from container:

$ sudo docker network disconnect <networkName> <containerName>



==================================================
=============== Volume, Bind mount ===============
==================================================

We can see volume of an image with inspect:

.ContainerConfig --> .volume   // /var/lib/mysql


$ sudo docker volume ls

$ sudo dokcer volume inspect <name>    // we can see mount volume in the host. like: /var/lib/docker/volume/mysqldb1/_data

$ sudo docker volume rm $(sudo docker volume ls -q)   // remove volume(s)


To use an existing volume instead of creating new volume, We can select that volume when we want to run a container:

$ sudo docker container run ... -v existingVolume:/path/ imageName


To see container's volume, we can inspect that and look at .Mount node:

. Mounts --> .VolumesArray




Difference between volumes and bind mounts:

1. With volumes we can't modify data files, but in bind mounts we can. also with non-docker process we can.

2. We can use volumes in Dockerfile, but not bind mounts.



Bind mount:

To bind data from host to container, or from container to host, with bind mount type, we can use this in run command of container:

$ sudo docker container ... --mount type=bind,source=/path/to/host/data,target=/path/to/container <containerName>

for example: --mount type=bind,source=/home/ehsan/projects/data,target=/app

we can inspect the container and see .Mounts node.

The bind mount is two-way binding. it means that if we create a file in host, it automaticaly copies to container. and if we create a file in contaienr, it automatically appears in host path too.
